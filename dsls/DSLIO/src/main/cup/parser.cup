/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;



/* define how to connect to the scanner! */
init with {: /** NOP  */ :};
scan with {: return getScanner().next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

terminal IMPERATIVE
	METHOD_HEADER,
	OPTION,

	LOGIC_START,
	LOGIC_END,

	IO_START,
	IOSeparatorArrow,
	IO_END,

	IDENTITY,
	LITERAL,


	DO, WITH, NULL, LINE,
    WHEN, THEN, OTHERWISE,
    STARTS, ENDS, CONTAINS, IS, NOT,
    CROSSWALK,
    SET, TO, ON,
    SPLIT, CONCAT,
    CONVERTDATE, SKIP, ERROR,

	LOGIC_KEYWORD,

	NOP;


/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       | NUMBER:n	                     {: RESULT = n;           :}
             ;